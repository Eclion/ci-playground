name: 'output testing'


on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:

jobs:
  json_validation:
    name: 'Input validation'
    runs-on: ubuntu-latest
    steps:

    - name: Json format check
      id: json_format_check
      run: for file in $(find . -type f -name *.json); do $(cat $file | jq empty) || echo "$file is not a valid json file"; done
      continue-on-error: true

    - name: Control character check
      id: ctrl_char_check
      run: grep "{" -r . | sed "s/:.*//g" | uniq
      continue-on-error: true

    - name: Display outputs
      run: echo "json outcome is ${{ steps.json_format_check.outcome }}" && echo "json output is ${{ steps.json_format_check.outputs.stdout }}" && echo "char check output is ${{ steps.ctrl_char_check.outputs.stdout }}" && echo "char check length is ${{ steps.json_format_check.outputs.stdout.length }}"
      
    - name: Test script
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Playground output')
          })

    
          // 2. Prepare format of the comment
          const output = `#### Playground output
          ${process.env.PLAN}`


          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }